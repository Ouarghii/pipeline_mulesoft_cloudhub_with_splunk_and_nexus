name: CI/CD Pipeline GITHUB/CloudHub

permissions:
  contents: write 

on: push
jobs:
  pipe-github-cloudhub:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up Git identity
        run: |
          git config --global user.email "${{ secrets.GIT_EMAIL }}"

      - name: Set up Git remote
        run: |
         git remote add dev https://${{ secrets.GIT_TOKEN }}@github.com/${{ secrets.GIT_USERNAME }}/${{ secrets.REPO_NAME }}.git
         git remote set-url dev https://${{ secrets.GIT_TOKEN }}@github.com/${{ secrets.GIT_USERNAME }}/${{ secrets.REPO_NAME }}.git
      
      - name: Create and push Maven settings file
        run: |
          GIT_EMAIL_ENCRYPTED=$(echo -n "${{ secrets.GIT_EMAIL }}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "${{ secrets.ENCRYPTION_PASSWORD }}" -base64 -A)
          GIT_TOKEN_ENCRYPTED=$(echo -n "${{ secrets.GIT_TOKEN }}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "${{ secrets.ENCRYPTION_PASSWORD }}" -base64 -A)
          ANYPOINT_CLIENT_ID_ENCRYPTED=$(echo -n "${{ secrets.ANYPOINT_CLIENT_ID }}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "${{ secrets.ENCRYPTION_PASSWORD }}" -base64 -A)
          ANYPOINT_CLIENT_SECRET_ENCRYPTED=$(echo -n "${{ secrets.ANYPOINT_CLIENT_SECRET }}" | openssl enc -aes-256-cbc -salt -pbkdf2 -k "${{ secrets.ENCRYPTION_PASSWORD }}" -base64 -A)
        
          cat << EOF > settings.xml
          <settings>
            <servers>
              <server>
                <id>anypoint-repo</id>
                <username>${ANYPOINT_CLIENT_ID_ENCRYPTED}</username>
                <password>${ANYPOINT_CLIENT_SECRET_ENCRYPTED}</password>
              </server>
              <server>
                <id>github-repo</id>
                <username>${GIT_EMAIL_ENCRYPTED}</username>
                <password>${GIT_TOKEN_ENCRYPTED}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>anypoint-profile</id>
                <properties>
                  <anypoint.clientId>${ANYPOINT_CLIENT_ID_ENCRYPTED}</anypoint.clientId>
                  <anypoint.clientSecret>${ANYPOINT_CLIENT_SECRET_ENCRYPTED}</anypoint.clientSecret>
                </properties>
              </profile>
              <profile>
                <id>github-profile</id>
                <properties>
                  <github.email>${GIT_EMAIL_ENCRYPTED}</github.email>
                  <github.token>${GIT_TOKEN_ENCRYPTED}</github.token>
                </properties>
              </profile>
            </profiles>
            <activeProfiles>
              <activeProfile>anypoint-profile</activeProfile>
              <activeProfile>github-profile</activeProfile>
            </activeProfiles>
          </settings>
          EOF

          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USERNAME }}"
          git checkout -b ${{ github.ref_name }} || git checkout ${{ github.ref_name }}
          git add settings.xml
          git commit -m "Add Maven settings file" || echo "Nothing to commit"
          git push dev ${{ github.ref_name }}

      - name: Create and Update Parent POM File
        run: |
          
          if [ -f settings.xml ]; then
            GIT_EMAIL_ENCRYPTED=$(sed -n '/<id>github-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p' settings.xml)
            GIT_EMAIL_DECRYPTED=$(echo "${GIT_EMAIL_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "${{ secrets.ENCRYPTION_PASSWORD }}" -base64)
          git config --global user.email "${GIT_EMAIL_DECRYPTED}"
          fi
          touch update-parentPOM.sh
          echo '#!/bin/bash' > update-parentPOM.sh
          echo 'if [ -f settings.xml ]; then' >> update-parentPOM.sh
          echo '    ANYPOINT_CLIENT_ID_ENCRYPTED=$(sed -n "/<id>anypoint-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p" settings.xml)' >> update-parentPOM.sh
          echo '    ANYPOINT_CLIENT_SECRET_ENCRYPTED=$(sed -n "/<id>anypoint-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p" settings.xml)' >> update-parentPOM.sh
          echo '    ANYPOINT_ID_DECRYPTED=$(echo "${ANYPOINT_CLIENT_ID_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "${{ secrets.ENCRYPTION_PASSWORD }}" -base64)' >> update-parentPOM.sh
          echo '    ANYPOINT_SECRET_DECRYPTED=$(echo "${ANYPOINT_CLIENT_SECRET_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "${{ secrets.ENCRYPTION_PASSWORD }}" -base64)' >> update-parentPOM.sh
          # echo '    org_id=$(curl -X GET "https://anypoint.mulesoft.com/accounts/api/me" -H "Authorization: Bearer ${{ secrets.ACCESS_TOKEN }}" -H "Content-Type: application/json" | jq -r ".user.organization.id")' >> update-parentPOM.sh
          # echo '    env_id=$(curl -X GET "https://anypoint.mulesoft.com/accounts/api/organizations/$org_id/environments?name=${{ github.ref_name }}" -H "Authorization: Bearer ${{ secrets.ACCESS_TOKEN }}" -H "Content-Type: application/json" | jq -r ".data[0].id")' >> update-parentPOM.sh
          # echo '    apps_cloudhub=$(curl -X GET "https://anypoint.mulesoft.com/cloudhub/api/v2/applications" -H "Authorization: Bearer ${{ secrets.ACCESS_TOKEN }}" -H "x-anypnt-env-id: $env_id" | jq -r ".[].domain")' >> update-parentPOM.sh
          echo '    MULE_APP_NAME=$(grep -oPm1 "(?<=<name>)[^<]+" pom.xml)' >> update-parentPOM.sh
          # echo '    found=false' >> update-parentPOM.sh
          # echo '    for app in $apps_cloudhub; do' >> update-parentPOM.sh
          # echo '          if [[ "$app" == "$MULE_APP_NAME" ]]; then' >> update-parentPOM.sh
          # echo '              found=true' >> update-parentPOM.sh
          # echo '                break' >> update-parentPOM.sh
          # echo '          fi' >> update-parentPOM.sh
          # echo '    done' >> update-parentPOM.sh
          # echo '    if $found; then' >> update-parentPOM.sh
          # echo '      version_number=1' >> update-parentPOM.sh
          # echo '      echo "Application $MULE_APP_NAME already deployed in cloudHub."' >> update-parentPOM.sh
          # echo '      while echo "$apps_cloudhub" | grep -q "${MULE_APP_NAME}v$version_number"; do' >> update-parentPOM.sh
          # echo '          echo "Application $MULE_APP_NAMEV$version_number already deployed in cloudHub."' >> update-parentPOM.sh
          # echo '            version_number=$((version_number + 1))' >> update-parentPOM.sh
          # echo '      done' >> update-parentPOM.sh
          # echo '    MULE_APP_NAME="${MULE_APP_NAME}V$version_number"' >> update-parentPOM.sh
          # echo '    echo "MULEOSFT app name: $MULE_APP_NAME"' >> update-parentPOM.sh
          # echo '    fi' >> update-parentPOM.sh
          echo '    echo "Deploying application: ${MULE_APP_NAME}"' >> update-parentPOM.sh        
          echo '    MULE_RUNTIME_VERSION=$(grep -oPm1 "(?<=<app.runtime>)[^<]+" pom.xml)' >> update-parentPOM.sh
          echo 'cat << EOF > parent_pom.xml' >> update-parentPOM.sh
          echo '<?xml version="1.0" encoding="UTF-8"?>' >> update-parentPOM.sh
          echo '<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">' >> update-parentPOM.sh
          echo '  <modelVersion>4.0.0</modelVersion>' >> update-parentPOM.sh
          echo '  <groupId>394989c8-ee4c-4f8c-805d-f393165ac9a3</groupId>' >> update-parentPOM.sh
          echo '  <artifactId>parent-pom</artifactId>' >> update-parentPOM.sh
          echo '  <version>1.0.0</version>' >> update-parentPOM.sh
          echo '  <packaging>pom</packaging>' >> update-parentPOM.sh
          echo '  <name>parent-pom</name>' >> update-parentPOM.sh
          echo '  <properties>' >> update-parentPOM.sh
          echo '    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>' >> update-parentPOM.sh
          echo '    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>' >> update-parentPOM.sh
          echo '    <app.runtime>${MULE_RUNTIME_VERSION}</app.runtime>' >> update-parentPOM.sh
          echo '    <mule.maven.plugin.version>4.2.0</mule.maven.plugin.version>' >> update-parentPOM.sh
          echo '  </properties>' >> update-parentPOM.sh
          echo '  <build>' >> update-parentPOM.sh
          echo '    <plugins>' >> update-parentPOM.sh
          echo '    </plugins>' >> update-parentPOM.sh
          echo '  </build>' >> update-parentPOM.sh
          echo '</project>' >> update-parentPOM.sh
          echo 'EOF' >> update-parentPOM.sh
          echo 'PLUGIN_EXISTS=$(grep -c "<groupId>org.mule.tools.maven</groupId>" parent_pom.xml)' >> update-parentPOM.sh
          echo 'if [ "$PLUGIN_EXISTS" -eq 0 ]; then' >> update-parentPOM.sh
          echo '  if [ "${{ github.ref_name }}" == "main" ] || [ "${{ github.ref_name }}" == "master" ]; then' >> update-parentPOM.sh
          echo '    CONFIGURATION="<plugin>\n<groupId>org.mule.tools.maven</groupId>\n<artifactId>mule-maven-plugin</artifactId>\n<version>\${mule.maven.plugin.version}</version>\n<extensions>true</extensions>\n<configuration>\n<cloudhub2Deployment>\n<uri>https://anypoint.mulesoft.com/</uri>\n<provider>MC</provider>\n<environment>${{secrets.PRODUCTION_ENVIRONMENT}}</environment>\n<target>Cloudhub-US-East-2</target>\n<muleVersion>${MULE_RUNTIME_VERSION}</muleVersion>\n<username>Raslen11</username>\n<password>Raslen123**</password>\n<applicationName>${MULE_APP_NAME}</applicationName>\n<businessGroup>${{secrets.BUSINESS_GROUP}}</businessGroup>\n<replicas>1</replicas>\n<vCores>1</vCores>\n<server>Repository</server>\n</cloudhub2Deployment>\n</configuration>\n</plugin>"' >> update-parentPOM.sh
          echo '  else' >> update-parentPOM.sh
          echo '    CONFIGURATION="<plugin>\n<groupId>org.mule.tools.maven</groupId>\n<artifactId>mule-maven-plugin</artifactId>\n<version>\${mule.maven.plugin.version}</version>\n<extensions>true</extensions>\n<configuration>\n<cloudhub2Deployment>\n<uri>https://anypoint.mulesoft.com/</uri>\n<provider>MC</provider>\n<environment>${{ github.ref_name }}</environment>\n<target>Cloudhub-US-East-2</target>\n<muleVersion>${MULE_RUNTIME_VERSION}</muleVersion>\n<username>Raslen11</username>\n<password>Raslen123**</password>\n<applicationName>${MULE_APP_NAME}</applicationName>\n<businessGroup>${{secrets.BUSINESS_GROUP}}</businessGroup>\n<replicas>1</replicas>\n<vCores>1</vCores>\n<server>Repository</server>\n</cloudhub2Deployment>\n</configuration>\n</plugin>"' >> update-parentPOM.sh
          echo '  fi' >> update-parentPOM.sh
          echo '  sed -i "/<\/plugins>/i $CONFIGURATION" parent_pom.xml' >> update-parentPOM.sh
          echo '  git checkout -b ${{ github.ref_name }} || git checkout ${{ github.ref_name }}' >> update-parentPOM.sh 
          echo '  git add parent_pom.xml update-parentPOM.sh' >> update-parentPOM.sh
          echo '  git commit -m "Create and update Parent POM file"' >> update-parentPOM.sh
          echo '  git push dev ${{ github.ref_name }}' >> update-parentPOM.sh
          echo 'fi' >> update-parentPOM.sh
          echo 'fi' >> update-parentPOM.sh
          chmod +x update-parentPOM.sh
          ./update-parentPOM.sh
          
      - name: Update Project POM File
        run: |
          GIT_EMAIL_ENCRYPTED=$(sed -n '/<id>github-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p' settings.xml)
          GIT_EMAIL_DECRYPTED=$(echo "${GIT_EMAIL_ENCRYPTED}" | openssl enc -aes-256-cbc -d -salt -pbkdf2 -k "${{ secrets.ENCRYPTION_PASSWORD }}" -base64)
          git config --global user.email "${GIT_EMAIL_DECRYPTED}"

          touch update-projectPOM.sh
          echo '#!/bin/bash' > update-projectPOM.sh
          echo 'sed -i '\''s|<app.runtime>[^<]*</app.runtime>|<app.runtime>4.4.0</app.runtime>|'\'' pom.xml' >> update-projectPOM.sh
          echo 'PARENT_GROUP_ID=$(grep -oPm1 "(?<=<groupId>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
          echo 'PARENT_ARTIFACT_ID=$(grep -oPm1 "(?<=<artifactId>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
          echo 'PARENT_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
          echo 'PARENT_EXISTS=$(grep -c "<parent>" pom.xml)' >> update-projectPOM.sh
          echo 'if [ "$PARENT_EXISTS" -eq 0 ]; then' >> update-projectPOM.sh
          echo '  PARENT_INCLUSION="<parent>\n<groupId>${PARENT_GROUP_ID}</groupId>\n<artifactId>${PARENT_ARTIFACT_ID}</artifactId>\n<version>${PARENT_VERSION}</version>\n<relativePath>./parent_pom.xml</relativePath>\n</parent>"' >> update-projectPOM.sh
          echo '  sed -i "/<\/project>/i $PARENT_INCLUSION" pom.xml' >> update-projectPOM.sh
          echo '  git checkout -b ${{ github.ref_name }} || git checkout ${{ github.ref_name }}' >> update-projectPOM.sh
          echo '  git add pom.xml' >> update-projectPOM.sh
          echo '  git commit -m "Update project POM to include Parent POM"' >> update-projectPOM.sh
          echo '  git push dev ${{ github.ref_name }}' >> update-projectPOM.sh
          echo 'fi' >> update-projectPOM.sh
          chmod +x update-projectPOM.sh
          ./update-projectPOM.sh
          
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # - name: Build
      #   id: build
      #   run: |
      #     mvn clean package
      
      # - name: Deploy to CloudHub
      #   id: deploy
      #   run: |
      #     mvn deploy -DmuleDeploy -DskipTests -X
          

      - name: Build
        id: build
        run: |
          mvn -DskipTests clean deploy -s settings.xml
      
      - name: Deploy to CloudHub
        id: deploy
        run: |
          mvn deploy -DmuleDeploy -DskipTests
    





      # - name: Get MuleSoft CloudHub Logs
      #   run: |
      #     if [ "$(uname)" == "Darwin" ]; then
      #       brew install jq  # macOS
      #     elif [ -x "$(command -v apt-get)" ]; then
      #       sudo apt-get update && sudo apt-get install -y jq  # Ubuntu/Debian
      #     elif [ -x "$(command -v yum)" ]; then
      #       sudo yum install -y jq  # CentOS/RHEL
      #     elif [ -x "$(command -v pacman)" ]; then
      #       sudo pacman -S --noconfirm jq  # Arch Linux
      #     else
      #       echo "Unsupported OS for jq installation"
      #       exit 1
      #     fi

      #     # Fetch organization ID
      #     ORG_RESPONSE=$(curl -X GET "https://anypoint.mulesoft.com/accounts/api/me" \
      #       -H "Authorization: Bearer a54172ff-57f6-40d9-92ed-74c4eb3092ad" \
      #       -H "Content-Type: application/json")

      #     if [[ ! "$ORG_RESPONSE" =~ ^\{.*\}$ ]]; then
      #       echo "Error: Invalid or empty JSON response: $ORG_RESPONSE"
      #       exit 1
      #     fi
      #     ORG_ID=$(echo "$ORG_RESPONSE" | jq -r '.user.organization.id')
      #      echo "Organization ID: $ORG_ID"
      #      echo "ORG_ID=$ORG_ID" >> $GITHUB_ENV

      #     # Fetch environment ID
      #     ENV_RESPONSE=$(curl -X GET "https://anypoint.mulesoft.com/accounts/api/organizations/$ORG_ID/environments?name=${{ github.ref_name }}" \
      #      -H "Authorization: Bearer a54172ff-57f6-40d9-92ed-74c4eb3092ad" \
      #      -H "Content-Type: application/json")

      #     if [[ ! "$ENV_RESPONSE" =~ ^\{.*\}$ ]]; then
      #       echo "Error: Invalid or empty JSON response: $ENV_RESPONSE"
      #       exit 1
      #     fi
      #     ENV_ID=$(echo "$ENV_RESPONSE" | jq -r '.data[0].id')
      #     echo "Environment ID: $ENV_ID"
      #     echo "ENV_ID=$ENV_ID" >> $GITHUB_ENV

      #     # Fetch logs
      #     curl -X GET "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/mulesoftcicd/deployments/672b3bad266afb36fdc1af25/logs" \
      #       -H "Authorization: Bearer a54172ff-57f6-40d9-92ed-74c4eb3092ad" \
      #       -H "x-anypnt-org-id: ${ORG_ID}" \
      #       -H "X-ANYPNT-ENV-ID: ${ENV_ID}" \
      #       -o mule-logs.json

      #     if [ -s mule-logs.json ]; then
      #       # Create a new metrics file for the log messages
      #       > metrics.txt

      #       # Process each log entry
      #       jq -r '.data[] | "log_entry{app_name=\"mulesoftcicd\", environment=\"developer\", level=\"\(.level)\", timestamp=\"\(.timestamp)\", message=\"\(.message | gsub("\""; "\\\""))\"} 1"' mule-logs.json >> metrics.txt

      #       # Display the contents of metrics.txt to verify
      #       cat metrics.txt

      #       # Push all log messages to the Prometheus Pushgateway
      #       curl -X POST --data-binary @metrics.txt https://intense-dory-notably.ngrok-free.app/metrics/job/ngrok_metrics
      #     else
      #       echo "No logs available to process"
      #     fi
      - name: Get MuleSoft CloudHub Logs
        run: |
          if [ "$(uname)" == "Darwin" ]; then
            brew install jq  # macOS
          elif [ -x "$(command -v apt-get)" ]; then
            sudo apt-get update && sudo apt-get install -y jq  # Ubuntu/Debian
          elif [ -x "$(command -v yum)" ]; then
            sudo yum install -y jq  # CentOS/RHEL
          elif [ -x "$(command -v pacman)" ]; then
            sudo pacman -S --noconfirm jq  # Arch Linux
          else
            echo "Unsupported OS for jq installation"
            exit 1
          fi
          ORG_RESPONSE=$(curl -X GET "https://anypoint.mulesoft.com/accounts/api/me" \
            -H "Authorization: Bearer 738924b7-4f6e-4fc9-9e9b-9f671ef90f31" \
            -H "Content-Type: application/json" \
            -v)  # Verbose mode for debugging

          # Check if the response is valid JSON
          if [[ ! "$ORG_RESPONSE" =~ ^\{.*\}$ ]]; then
            echo "Error: Invalid or empty JSON response: $ORG_RESPONSE"
            exit 1
          fi

          # Parse Organization ID
          ORG_ID=$(echo "$ORG_RESPONSE" | jq -r '.user.organization.id')

          echo "Organization ID: $ORG_ID"
          echo "ORG_ID=$ORG_ID" >> $GITHUB_ENV  # Save as environment variable

          # Fetch Environment ID using the Organization ID
          ENV_RESPONSE=$(curl -X GET "https://anypoint.mulesoft.com/accounts/api/organizations/7ad879c6-b198-41d4-b976-e09aec855fdc/environments?name=${{ github.ref_name }}" \
            -H "Authorization: Bearer 738924b7-4f6e-4fc9-9e9b-9f671ef90f31" \
            -H "Content-Type: application/json" \
            -v)  # Verbose mode for debugging


          if [[ ! "$ENV_RESPONSE" =~ ^\{.*\}$ ]]; then
            echo "Error: Invalid or empty JSON response: $ENV_RESPONSE"
            exit 1
          fi

          # Parse Environment ID
          ENV_ID=$(echo "$ENV_RESPONSE" | jq -r '.data[0].id')

          echo "Environment ID: $ENV_ID"
          echo "ENV_ID=$ENV_ID" >> $GITHUB_ENV  # Save as environment variable
          # Fetch logs from CloudHub and handle errors
          curl -X GET "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/muleapp/deployments/672d480ac1612a4e6d18c186/logs" \
            -H "Authorization: Bearer 738924b7-4f6e-4fc9-9e9b-9f671ef90f31" \
            -H "x-anypnt-org-id: 7ad879c6-b198-41d4-b976-e09aec855fdc" \
            -H "X-ANYPNT-ENV-ID: f88fa23e-21ec-41aa-8135-c3e1f3c31124" \
            -o mule-logs.json || echo "Error retrieving logs"
          # Check if the logs file is not empty
          if [ -s mule-logs.json ]; then
            # Display the logs to check content
            cat mule-logs.json

            # Prepare the Prometheus metrics file for log count
            LOG_COUNT=$(jq '.data | length' mule-logs.json)
            echo "mule_logs_total{app_name=\"muleapp\", environment=\"developer\"} ${LOG_COUNT}" > metrics.txt
  
            # Instead of sending full log text as metric values, include log details as labels for Prometheus
            jq -r '.data[] | "log_entry{app_name=\"muleapp\", environment=\"developer\", level=\"\(.level)\", timestamp=\"\(.timestamp)\", message=\"\(.message | gsub("\""; "\\\""))\"} 1"' mule-logs.json >> metrics.txt

            # Display the contents of metrics.txt for review
            cat metrics.txt

            # Post the metrics to Prometheus Pushgateway
            curl -X POST --data-binary @metrics.txt https://intense-dory-notably.ngrok-free.app/metrics/job/ngrok_metrics
          else
            echo "No logs available to process"
          fi


      - name: Fetch Project Logs and Push to Pushgateway
        run: |
          echo "Fetching logs from the remote server..."
          curl -s https://choice-wahoo-plainly.ngrok-free.app/logs -o project.log || { echo "Failed to retrieve logs"; exit 1; }

          echo "Pushing logs to Pushgateway..."
          curl -X POST --data-binary @project.log https://intense-dory-notably.ngrok-free.app/metrics/job/ngrok_metrics || echo "Failed to push logs to Pushgateway"
