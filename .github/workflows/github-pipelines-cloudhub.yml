name: CI/CD Pipeline GITHUB/CloudHub

permissions:
  contents: write 

on: push
jobs:
  pipe-github-cloudhub:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up Git identity
        run: |
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "Ferielkraiem2000"  

      - name: Set up Git remote
        run: |
          git remote add dev https://${{ secrets.GIT_TOKEN }}@github.com/Ferielkraiem2000/pipeline_mulesoft_cloudhub.git
          git remote set-url dev https://${{ secrets.GIT_TOKEN }}@github.com/Ferielkraiem2000/pipeline_mulesoft_cloudhub.git
          
      # - name: Create and push Maven settings file
      #   run: |
          
      #     cat << EOF > settings.xml
      #     <settings>
      #       <servers>
      #         <server>
      #           <id>anypoint-repo</id>
      #           <username>${{ secrets.ANYPOINT_CLIENT_ID }}</username>
      #           <password>${{ secrets.ANYPOINT_CLIENT_SECRET }}</password>
      #         </server>
      #         <server>
      #           <id>github-repo</id>
      #           <username>${{ secrets.GIT_EMAIL }}</username>
      #           <password>${{ secrets.GIT_TOKEN }}</password>
      #         </server>
      #       </servers>
      #       <profiles>
      #         <profile>
      #           <id>anypoint-profile</id>
      #           <properties>
      #             <anypoint.clientId>${{ secrets.ANYPOINT_CLIENT_ID }}</anypoint.clientId>
      #             <anypoint.clientSecret>${{ secrets.ANYPOINT_CLIENT_SECRET }}</anypoint.clientSecret>
      #           </properties>
      #         </profile>
      #         <profile>
      #           <id>github-profile</id>
      #           <properties>
      #             <github.email>${{ secrets.GIT_EMAIL }}</github.email>
      #             <github.token>${{ secrets.GIT_TOKEN }}</github.token>
      #           </properties>
      #         </profile>
      #       </profiles>
      #       <activeProfiles>
      #         <activeProfile>anypoint-profile</activeProfile>
      #         <activeProfile>github-profile</activeProfile>
      #       </activeProfiles>
      #     </settings>
      #     EOF

      #     git checkout -b ${{ github.ref_name }} || git checkout ${{ github.ref_name }}
      #     git add settings.xml
      #     git commit -m "Add Maven settings file" || echo "Nothing to commit"
      #     git push dev ${{ github.ref_name }}

          
      # - name: Create and Update Parent POM File
      #   run: |
      #     GIT_EMAIL_USER=$(sed -n '/<id>github-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p' settings.xml)
      #     GIT_TOKEN_USER=$(sed -n '/<id>github-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p' settings.xml)
      #     git config --global user.email "${GIT_EMAIL_USER}"
       
      #     touch update-parentPOM.sh
      #     echo '#!/bin/bash' > update-parentPOM.sh
      #     echo 'ANYPOINT_ID=$(sed -n "/<id>anypoint-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p" settings.xml)' >> update-parentPOM.sh
      #     echo 'ANYPOINT_SECRET=$(sed -n "/<id>anypoint-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p" settings.xml)' >> update-parentPOM.sh
      #     echo 'cat << EOF > parent_pom.xml' >> update-parentPOM.sh
      #     echo '<?xml version="1.0" encoding="UTF-8"?>' >> update-parentPOM.sh
      #     echo '<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">' >> update-parentPOM.sh
      #     echo '  <modelVersion>4.0.0</modelVersion>' >> update-parentPOM.sh
      #     echo '  <groupId>com.mycompany</groupId>' >> update-parentPOM.sh
      #     echo '  <artifactId>parent-pom</artifactId>' >> update-parentPOM.sh
      #     echo '  <version>1.0.0-SNAPSHOT</version>' >> update-parentPOM.sh
      #     echo '  <packaging>pom</packaging>' >> update-parentPOM.sh
      #     echo '  <name>parent-pom</name>' >> update-parentPOM.sh
      #     echo '  <properties>' >> update-parentPOM.sh
      #     echo '    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>' >> update-parentPOM.sh
      #     echo '    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>' >> update-parentPOM.sh
      #     echo '    <app.runtime>4.8.0</app.runtime>' >> update-parentPOM.sh
      #     echo '    <mule.maven.plugin.version>4.2.0</mule.maven.plugin.version>' >> update-parentPOM.sh
      #     echo '  </properties>' >> update-parentPOM.sh
      #     echo '  <build>' >> update-parentPOM.sh
      #     echo '    <plugins>' >> update-parentPOM.sh
      #     echo '    </plugins>' >> update-parentPOM.sh
      #     echo '  </build>' >> update-parentPOM.sh
      #     echo '</project>' >> update-parentPOM.sh
      #     echo 'EOF' >> update-parentPOM.sh
      #     echo 'PLUGIN_EXISTS=$(grep -c "<groupId>org.mule.tools.maven</groupId>" parent_pom.xml)' >> update-parentPOM.sh
      #     echo 'if [ "$PLUGIN_EXISTS" -eq 0 ]; then' >> update-parentPOM.sh
      #     echo '  if [ "${{ github.ref_name }}" == "main" ] || [ "${{ github.ref_name }}" == "master" ]; then' >> update-parentPOM.sh
      #     echo '    CONFIGURATION="<plugin>\n<groupId>org.mule.tools.maven</groupId>\n<artifactId>mule-maven-plugin</artifactId>\n<version>\${mule.maven.plugin.version}</version>\n<extensions>true</extensions>\n<configuration>\n<cloudHubDeployment>\n<uri>https://anypoint.mulesoft.com/</uri>\n<muleVersion>4.8.0</muleVersion>\n<connectedAppClientId>${ANYPOINT_ID}</connectedAppClientId>\n<connectedAppClientSecret>${ANYPOINT_SECRET}</connectedAppClientSecret>\n<connectedAppGrantType>client_credentials</connectedAppGrantType>\n<applicationName>devops</applicationName>\n<businessGroup>${{secrets.BUSINESS_GROUP}}</businessGroup>\n<environment>${{secrets.PRODUCTION_ENVIRONMENT}}</environment>\n<workers>1</workers>\n<objectStoreV2>true</objectStoreV2>\n</cloudHubDeployment>\n</configuration>\n</plugin>"' >> update-parentPOM.sh
      #     echo '  else' >> update-parentPOM.sh
      #     echo '    CONFIGURATION="<plugin>\n<groupId>org.mule.tools.maven</groupId>\n<artifactId>mule-maven-plugin</artifactId>\n<version>\${mule.maven.plugin.version}</version>\n<extensions>true</extensions>\n<configuration>\n<cloudHubDeployment>\n<uri>https://anypoint.mulesoft.com/</uri>\n<muleVersion>4.8.0</muleVersion>\n<connectedAppClientId>${ANYPOINT_ID}</connectedAppClientId>\n<connectedAppClientSecret>${ANYPOINT_SECRET}</connectedAppClientSecret>\n<connectedAppGrantType>client_credentials</connectedAppGrantType>\n<applicationName>devops</applicationName>\n<businessGroup>${{secrets.BUSINESS_GROUP}}</businessGroup>\n<environment>${{ github.ref_name }}</environment>\n<workers>1</workers>\n<objectStoreV2>true</objectStoreV2>\n</cloudHubDeployment>\n</configuration>\n</plugin>"' >> update-parentPOM.sh
      #     echo '  fi' >> update-parentPOM.sh
      #     echo '  sed -i "/<\/plugins>/i $CONFIGURATION" parent_pom.xml' >> update-parentPOM.sh
      #     echo '  git checkout -b ${{ github.ref_name }} || git checkout ${{ github.ref_name }}' >> update-parentPOM.sh 
      #     echo '  git add parent_pom.xml update-parentPOM.sh' >> update-parentPOM.sh
      #     echo '  git commit -m "Create and update Parent POM file"' >> update-parentPOM.sh
      #     echo '  git push dev ${{ github.ref_name }}' >> update-parentPOM.sh
      #     echo 'fi' >> update-parentPOM.sh
      #     chmod +x update-parentPOM.sh
      #     ./update-parentPOM.sh
          
      # - name: Update Project POM File
      #   run: |
      #     GIT_EMAIL_USER=$(sed -n '/<id>github-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p' settings.xml)
      #     GIT_TOKEN_USER=$(sed -n '/<id>github-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p' settings.xml)
      #     git config --global user.email "${GIT_EMAIL_USER}"

      #     touch update-projectPOM.sh
      #     echo '#!/bin/bash' > update-projectPOM.sh
      #     echo 'PARENT_GROUP_ID=$(grep -oPm1 "(?<=<groupId>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
      #     echo 'PARENT_ARTIFACT_ID=$(grep -oPm1 "(?<=<artifactId>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
      #     echo 'PARENT_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
      #     echo 'echo "The groupId is: $PARENT_GROUP_ID"' >> update-projectPOM.sh
      #     echo 'echo "The artifactId is: $PARENT_ARTIFACT_ID"' >> update-projectPOM.sh
      #     echo 'echo "The version is: $PARENT_VERSION"' >> update-projectPOM.sh
      #     echo 'PARENT_EXISTS=$(grep -c "<parent>" pom.xml)' >> update-projectPOM.sh
      #     echo 'if [ "$PARENT_EXISTS" -eq 0 ]; then' >> update-projectPOM.sh
      #     echo '  PARENT_INCLUSION="<parent>\n<groupId>${PARENT_GROUP_ID}</groupId>\n<artifactId>${PARENT_ARTIFACT_ID}</artifactId>\n<version>${PARENT_VERSION}</version>\n<relativePath>./parent_pom.xml</relativePath>\n</parent>"' >> update-projectPOM.sh
      #     echo '  sed -i "/<\/project>/i $PARENT_INCLUSION" pom.xml' >> update-projectPOM.sh
      #     echo '  git checkout -b ${{ github.ref_name }} || git checkout ${{ github.ref_name }}' >> update-projectPOM.sh
      #     echo '  git add pom.xml' >> update-projectPOM.sh
      #     echo '  git commit -m "Update project POM to include Parent POM"' >> update-projectPOM.sh
      #     echo '  git push dev ${{ github.ref_name }}' >> update-projectPOM.sh
      #     echo 'fi' >> update-projectPOM.sh
      #     chmod +x update-projectPOM.sh
      #     ./update-projectPOM.sh
          
      # - name: Cache Maven dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.m2/repository
      #     key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-maven-

      # - name: Build
      #   id: build
      #   run: |
      #     START_TIME=$(date +%s)
      #     mvn clean package
      #     END_TIME=$(date +%s)
      #     BUILD_DURATION=$((END_TIME - START_TIME))
          
      #     echo "Build completed in ${BUILD_DURATION} seconds"
          
      #     # Send build duration to Prometheus
      #     curl -X POST https://working-cobra-early.ngrok-free.app/metrics \
      #     -H "Content-Type: application/json" \
      #     -d '{
      #           "metric": "build_duration_seconds",
      #           "value": "'${BUILD_DURATION}'",
      #           "labels": {"job": "ci_build", "branch": "${{ github.ref_name }}"}
      #         }' -v
          

      # - name: Deploy to CloudHub
      #   id: deploy
      #   run: |
      #     # START_TIME=$(date +%s)
      #     mvn deploy -DmuleDeploy -DskipTests
      #     # END_TIME=$(date +%s)
      #     # DEPLOY_DURATION=$((END_TIME - START_TIME))
          
      #     # echo "Deploy completed in ${DEPLOY_DURATION} seconds"
          
      #     # # Send deploy duration to Prometheus
      #     # curl -X POST https://working-cobra-early.ngrok-free.app/metrics \
      #     # -H "Content-Type: application/json" \
      #     # -d '{
      #     #       "metric": "deploy_duration_seconds",
      #     #       "value": "'${DEPLOY_DURATION}'"
      #     #     }'

      # - name: Install jq
      #   run: |
      #     # Install jq for log processing
      #     if [ "$(uname)" == "Darwin" ]; then
      #       brew install jq  # macOS
      #     elif [ -x "$(command -v apt-get)" ]; then
      #       sudo apt-get update && sudo apt-get install -y jq  # Ubuntu/Debian
      #     elif [ -x "$(command -v yum)" ]; then
      #       sudo yum install -y jq  # CentOS/RHEL
      #     elif [ -x "$(command -v pacman)" ]; then
      #       sudo pacman -S --noconfirm jq  # Arch Linux
      #     else
      #       echo "Unsupported OS for jq installation"
      #       exit 1
      #     fi


      - name: Get MuleSoft CloudHub Logs
        run: |
          if [ "$(uname)" == "Darwin" ]; then
            brew install jq  # macOS
          elif [ -x "$(command -v apt-get)" ]; then
            sudo apt-get update && sudo apt-get install -y jq  # Ubuntu/Debian
          elif [ -x "$(command -v yum)" ]; then
            sudo yum install -y jq  # CentOS/RHEL
          elif [ -x "$(command -v pacman)" ]; then
            sudo pacman -S --noconfirm jq  # Arch Linux
          else
            echo "Unsupported OS for jq installation"
            exit 1
          fi
          # # Define variables for the log retrieval
          # CLIENT_ID="${{ secrets.ANYPOINT_CLIENT_ID }}"
          # CLIENT_SECRET="${{ secrets.ANYPOINT_CLIENT_SECRET }}"
          # APP_NAME="devops"
          # ENVIRONMENT="developer"
          # BEARER_TOKEN="c0acbb45-dbe4-43d5-8eb6-689dd3e08d0c"
          # ORG_ID="7ad879c6-b198-41d4-b976-e09aec855fdc"
          # ENV_ID="4c27de34-218f-4422-ba4f-51d72fadddfb"

          # # Fetch logs from CloudHub and handle errors
          # curl -X GET "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/devops/deployments/6710deb3f475af69c74f2c83/logs" \
          #   -H "Authorization: Bearer ${BEARER_TOKEN}" \
          #   -H "x-anypnt-org-id: ${ORG_ID}" \
          #   -H "X-ANYPNT-ENV-ID: ${ENV_ID}" \
          #   -o mule-logs.json || echo "Error retrieving logs"
          name: CI/CD Pipeline GITHUB/CloudHub

permissions:
  contents: write 

on: push
jobs:
  pipe-github-cloudhub:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      - name: Set up Git identity
        run: |
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "Ferielkraiem2000"  

      - name: Set up Git remote
        run: |
          git remote add dev https://${{ secrets.GIT_TOKEN }}@github.com/Ferielkraiem2000/pipeline_mulesoft_cloudhub.git
          git remote set-url dev https://${{ secrets.GIT_TOKEN }}@github.com/Ferielkraiem2000/pipeline_mulesoft_cloudhub.git
          
      # - name: Create and push Maven settings file
      #   run: |
          
      #     cat << EOF > settings.xml
      #     <settings>
      #       <servers>
      #         <server>
      #           <id>anypoint-repo</id>
      #           <username>${{ secrets.ANYPOINT_CLIENT_ID }}</username>
      #           <password>${{ secrets.ANYPOINT_CLIENT_SECRET }}</password>
      #         </server>
      #         <server>
      #           <id>github-repo</id>
      #           <username>${{ secrets.GIT_EMAIL }}</username>
      #           <password>${{ secrets.GIT_TOKEN }}</password>
      #         </server>
      #       </servers>
      #       <profiles>
      #         <profile>
      #           <id>anypoint-profile</id>
      #           <properties>
      #             <anypoint.clientId>${{ secrets.ANYPOINT_CLIENT_ID }}</anypoint.clientId>
      #             <anypoint.clientSecret>${{ secrets.ANYPOINT_CLIENT_SECRET }}</anypoint.clientSecret>
      #           </properties>
      #         </profile>
      #         <profile>
      #           <id>github-profile</id>
      #           <properties>
      #             <github.email>${{ secrets.GIT_EMAIL }}</github.email>
      #             <github.token>${{ secrets.GIT_TOKEN }}</github.token>
      #           </properties>
      #         </profile>
      #       </profiles>
      #       <activeProfiles>
      #         <activeProfile>anypoint-profile</activeProfile>
      #         <activeProfile>github-profile</activeProfile>
      #       </activeProfiles>
      #     </settings>
      #     EOF

      #     git checkout -b ${{ github.ref_name }} || git checkout ${{ github.ref_name }}
      #     git add settings.xml
      #     git commit -m "Add Maven settings file" || echo "Nothing to commit"
      #     git push dev ${{ github.ref_name }}

          
      # - name: Create and Update Parent POM File
      #   run: |
      #     GIT_EMAIL_USER=$(sed -n '/<id>github-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p' settings.xml)
      #     GIT_TOKEN_USER=$(sed -n '/<id>github-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p' settings.xml)
      #     git config --global user.email "${GIT_EMAIL_USER}"
       
      #     touch update-parentPOM.sh
      #     echo '#!/bin/bash' > update-parentPOM.sh
      #     echo 'ANYPOINT_ID=$(sed -n "/<id>anypoint-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p" settings.xml)' >> update-parentPOM.sh
      #     echo 'ANYPOINT_SECRET=$(sed -n "/<id>anypoint-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p" settings.xml)' >> update-parentPOM.sh
      #     echo 'cat << EOF > parent_pom.xml' >> update-parentPOM.sh
      #     echo '<?xml version="1.0" encoding="UTF-8"?>' >> update-parentPOM.sh
      #     echo '<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">' >> update-parentPOM.sh
      #     echo '  <modelVersion>4.0.0</modelVersion>' >> update-parentPOM.sh
      #     echo '  <groupId>com.mycompany</groupId>' >> update-parentPOM.sh
      #     echo '  <artifactId>parent-pom</artifactId>' >> update-parentPOM.sh
      #     echo '  <version>1.0.0-SNAPSHOT</version>' >> update-parentPOM.sh
      #     echo '  <packaging>pom</packaging>' >> update-parentPOM.sh
      #     echo '  <name>parent-pom</name>' >> update-parentPOM.sh
      #     echo '  <properties>' >> update-parentPOM.sh
      #     echo '    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>' >> update-parentPOM.sh
      #     echo '    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>' >> update-parentPOM.sh
      #     echo '    <app.runtime>4.8.0</app.runtime>' >> update-parentPOM.sh
      #     echo '    <mule.maven.plugin.version>4.2.0</mule.maven.plugin.version>' >> update-parentPOM.sh
      #     echo '  </properties>' >> update-parentPOM.sh
      #     echo '  <build>' >> update-parentPOM.sh
      #     echo '    <plugins>' >> update-parentPOM.sh
      #     echo '    </plugins>' >> update-parentPOM.sh
      #     echo '  </build>' >> update-parentPOM.sh
      #     echo '</project>' >> update-parentPOM.sh
      #     echo 'EOF' >> update-parentPOM.sh
      #     echo 'PLUGIN_EXISTS=$(grep -c "<groupId>org.mule.tools.maven</groupId>" parent_pom.xml)' >> update-parentPOM.sh
      #     echo 'if [ "$PLUGIN_EXISTS" -eq 0 ]; then' >> update-parentPOM.sh
      #     echo '  if [ "${{ github.ref_name }}" == "main" ] || [ "${{ github.ref_name }}" == "master" ]; then' >> update-parentPOM.sh
      #     echo '    CONFIGURATION="<plugin>\n<groupId>org.mule.tools.maven</groupId>\n<artifactId>mule-maven-plugin</artifactId>\n<version>\${mule.maven.plugin.version}</version>\n<extensions>true</extensions>\n<configuration>\n<cloudHubDeployment>\n<uri>https://anypoint.mulesoft.com/</uri>\n<muleVersion>4.8.0</muleVersion>\n<connectedAppClientId>${ANYPOINT_ID}</connectedAppClientId>\n<connectedAppClientSecret>${ANYPOINT_SECRET}</connectedAppClientSecret>\n<connectedAppGrantType>client_credentials</connectedAppGrantType>\n<applicationName>devops</applicationName>\n<businessGroup>${{secrets.BUSINESS_GROUP}}</businessGroup>\n<environment>${{secrets.PRODUCTION_ENVIRONMENT}}</environment>\n<workers>1</workers>\n<objectStoreV2>true</objectStoreV2>\n</cloudHubDeployment>\n</configuration>\n</plugin>"' >> update-parentPOM.sh
      #     echo '  else' >> update-parentPOM.sh
      #     echo '    CONFIGURATION="<plugin>\n<groupId>org.mule.tools.maven</groupId>\n<artifactId>mule-maven-plugin</artifactId>\n<version>\${mule.maven.plugin.version}</version>\n<extensions>true</extensions>\n<configuration>\n<cloudHubDeployment>\n<uri>https://anypoint.mulesoft.com/</uri>\n<muleVersion>4.8.0</muleVersion>\n<connectedAppClientId>${ANYPOINT_ID}</connectedAppClientId>\n<connectedAppClientSecret>${ANYPOINT_SECRET}</connectedAppClientSecret>\n<connectedAppGrantType>client_credentials</connectedAppGrantType>\n<applicationName>devops</applicationName>\n<businessGroup>${{secrets.BUSINESS_GROUP}}</businessGroup>\n<environment>${{ github.ref_name }}</environment>\n<workers>1</workers>\n<objectStoreV2>true</objectStoreV2>\n</cloudHubDeployment>\n</configuration>\n</plugin>"' >> update-parentPOM.sh
      #     echo '  fi' >> update-parentPOM.sh
      #     echo '  sed -i "/<\/plugins>/i $CONFIGURATION" parent_pom.xml' >> update-parentPOM.sh
      #     echo '  git checkout -b ${{ github.ref_name }} || git checkout ${{ github.ref_name }}' >> update-parentPOM.sh 
      #     echo '  git add parent_pom.xml update-parentPOM.sh' >> update-parentPOM.sh
      #     echo '  git commit -m "Create and update Parent POM file"' >> update-parentPOM.sh
      #     echo '  git push dev ${{ github.ref_name }}' >> update-parentPOM.sh
      #     echo 'fi' >> update-parentPOM.sh
      #     chmod +x update-parentPOM.sh
      #     ./update-parentPOM.sh
          
      # - name: Update Project POM File
      #   run: |
      #     GIT_EMAIL_USER=$(sed -n '/<id>github-repo<\/id>/,/<\/server>/ s/.*<username>\(.*\)<\/username>.*/\1/p' settings.xml)
      #     GIT_TOKEN_USER=$(sed -n '/<id>github-repo<\/id>/,/<\/server>/ s/.*<password>\(.*\)<\/password>.*/\1/p' settings.xml)
      #     git config --global user.email "${GIT_EMAIL_USER}"

      #     touch update-projectPOM.sh
      #     echo '#!/bin/bash' > update-projectPOM.sh
      #     echo 'PARENT_GROUP_ID=$(grep -oPm1 "(?<=<groupId>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
      #     echo 'PARENT_ARTIFACT_ID=$(grep -oPm1 "(?<=<artifactId>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
      #     echo 'PARENT_VERSION=$(grep -oPm1 "(?<=<version>)[^<]+" parent_pom.xml)' >> update-projectPOM.sh
      #     echo 'echo "The groupId is: $PARENT_GROUP_ID"' >> update-projectPOM.sh
      #     echo 'echo "The artifactId is: $PARENT_ARTIFACT_ID"' >> update-projectPOM.sh
      #     echo 'echo "The version is: $PARENT_VERSION"' >> update-projectPOM.sh
      #     echo 'PARENT_EXISTS=$(grep -c "<parent>" pom.xml)' >> update-projectPOM.sh
      #     echo 'if [ "$PARENT_EXISTS" -eq 0 ]; then' >> update-projectPOM.sh
      #     echo '  PARENT_INCLUSION="<parent>\n<groupId>${PARENT_GROUP_ID}</groupId>\n<artifactId>${PARENT_ARTIFACT_ID}</artifactId>\n<version>${PARENT_VERSION}</version>\n<relativePath>./parent_pom.xml</relativePath>\n</parent>"' >> update-projectPOM.sh
      #     echo '  sed -i "/<\/project>/i $PARENT_INCLUSION" pom.xml' >> update-projectPOM.sh
      #     echo '  git checkout -b ${{ github.ref_name }} || git checkout ${{ github.ref_name }}' >> update-projectPOM.sh
      #     echo '  git add pom.xml' >> update-projectPOM.sh
      #     echo '  git commit -m "Update project POM to include Parent POM"' >> update-projectPOM.sh
      #     echo '  git push dev ${{ github.ref_name }}' >> update-projectPOM.sh
      #     echo 'fi' >> update-projectPOM.sh
      #     chmod +x update-projectPOM.sh
      #     ./update-projectPOM.sh
          
      # - name: Cache Maven dependencies
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.m2/repository
      #     key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: |
      #       ${{ runner.os }}-maven-

      # - name: Build
      #   id: build
      #   run: |
      #     START_TIME=$(date +%s)
      #     mvn clean package
      #     END_TIME=$(date +%s)
      #     BUILD_DURATION=$((END_TIME - START_TIME))
          
      #     echo "Build completed in ${BUILD_DURATION} seconds"
          
      #     # Send build duration to Prometheus
      #     curl -X POST https://working-cobra-early.ngrok-free.app/metrics \
      #     -H "Content-Type: application/json" \
      #     -d '{
      #           "metric": "build_duration_seconds",
      #           "value": "'${BUILD_DURATION}'",
      #           "labels": {"job": "ci_build", "branch": "${{ github.ref_name }}"}
      #         }' -v
          

      # - name: Deploy to CloudHub
      #   id: deploy
      #   run: |
      #     # START_TIME=$(date +%s)
      #     mvn deploy -DmuleDeploy -DskipTests
      #     # END_TIME=$(date +%s)
      #     # DEPLOY_DURATION=$((END_TIME - START_TIME))
          
      #     # echo "Deploy completed in ${DEPLOY_DURATION} seconds"
          
      #     # # Send deploy duration to Prometheus
      #     # curl -X POST https://working-cobra-early.ngrok-free.app/metrics \
      #     # -H "Content-Type: application/json" \
      #     # -d '{
      #     #       "metric": "deploy_duration_seconds",
      #     #       "value": "'${DEPLOY_DURATION}'"
      #     #     }'

      # - name: Install jq
      #   run: |
      #     # Install jq for log processing
      #     if [ "$(uname)" == "Darwin" ]; then
      #       brew install jq  # macOS
      #     elif [ -x "$(command -v apt-get)" ]; then
      #       sudo apt-get update && sudo apt-get install -y jq  # Ubuntu/Debian
      #     elif [ -x "$(command -v yum)" ]; then
      #       sudo yum install -y jq  # CentOS/RHEL
      #     elif [ -x "$(command -v pacman)" ]; then
      #       sudo pacman -S --noconfirm jq  # Arch Linux
      #     else
      #       echo "Unsupported OS for jq installation"
      #       exit 1
      #     fi


      - name: Get MuleSoft CloudHub Logs
        run: |
          if [ "$(uname)" == "Darwin" ]; then
            brew install jq  # macOS
          elif [ -x "$(command -v apt-get)" ]; then
            sudo apt-get update && sudo apt-get install -y jq  # Ubuntu/Debian
          elif [ -x "$(command -v yum)" ]; then
            sudo yum install -y jq  # CentOS/RHEL
          elif [ -x "$(command -v pacman)" ]; then
            sudo pacman -S --noconfirm jq  # Arch Linux
          else
            echo "Unsupported OS for jq installation"
            exit 1
          fi
          org_id=$(curl -X GET "https://anypoint.mulesoft.com/accounts/api/me" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "Content-Type: application/json" | jq -r '.user.organization.id')
          echo "Organization ID: $org_id"

          env_id=$(curl -X GET "https://anypoint.mulesoft.com/accounts/api/organizations/$org_id/environments?name=${{ github.ref_name }}" \
            -H "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" \
            -H "Content-Type: application/json" | jq -r '.data[0].id')
          echo "Environment ID: $env_id"

          deployment_id=$(curl -X GET "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/$AZURE_BRANCH/deployments" \
            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
            -H "x-anypnt-env-id: $env_id" | jq -r '.data[0].deploymentId')
          echo "Deployment ID: $deployment_id"

          curl -X GET "https://anypoint.mulesoft.com/cloudhub/api/v2/applications/devops/deployments/$deployment_id/logs" \
             -H "Authorization: Bearer ${{secrets.ACCESS_TOKEN}}" \
             -H "x-anypnt-org-id: $org_id" \
             -H "X-ANYPNT-ENV-ID: $env_id" \
             -o mule-logs.json

          # Check if the logs file is not empty
          if [ -s mule-logs.json ]; then
            # Display the logs to check content
            cat mule-logs.json

            # Prepare the Prometheus metrics file for log count
            LOG_COUNT=$(jq '.data | length' mule-logs.json)
            echo "mule_logs_total{app_name=\"devops\", environment=\"developer\"} ${LOG_COUNT}" > metrics.txt
            
            # Instead of sending full log text as metric values, include log details as labels for Prometheus
            jq -r '.data[] | "log_entry{app_name=\"devops\", environment=\"developer\", level=\"\(.level)\", timestamp=\"\(.timestamp)\", message=\"\(.message | gsub("\""; "\\\""))\"} 1"' mule-logs.json >> metrics.txt

            # Display the contents of metrics.txt for review
            cat metrics.txt

            # Post the metrics to Prometheus Pushgateway
            curl -X POST --data-binary @metrics.txt https://intense-dory-notably.ngrok-free.app/metrics/job/ngrok_metrics
          else
            echo "No logs available to process"
          fi


      - name: Query Prometheus for Metrics
        run: |
          PROMETHEUS_URL="https://working-cobra-early.ngrok-free.app"
          # Query Prometheus to confirm the Pushgateway metrics are scraped
          curl -s "${PROMETHEUS_URL}/api/v1/query?query=mule_logs_total" || echo "Prometheus query failed"
          
          # Optionally, you can output the query result to check for metrics in Prometheus
          curl -s "${PROMETHEUS_URL}/api/v1/query?query=mule_logs_total" | jq


          # Check if the logs file is not empty
          if [ -s mule-logs.json ]; then
            # Display the logs to check content
            cat mule-logs.json

            # Prepare the Prometheus metrics file for log count
            LOG_COUNT=$(jq '.data | length' mule-logs.json)
            echo "mule_logs_total{app_name=\"devops\", environment=\"developer\"} ${LOG_COUNT}" > metrics.txt
            
            # Instead of sending full log text as metric values, include log details as labels for Prometheus
            jq -r '.data[] | "log_entry{app_name=\"devops\", environment=\"developer\", level=\"\(.level)\", timestamp=\"\(.timestamp)\", message=\"\(.message | gsub("\""; "\\\""))\"} 1"' mule-logs.json >> metrics.txt

            # Display the contents of metrics.txt for review
            cat metrics.txt

            # Post the metrics to Prometheus Pushgateway
            curl -X POST --data-binary @metrics.txt https://intense-dory-notably.ngrok-free.app/metrics/job/ngrok_metrics
          else
            echo "No logs available to process"
          fi


      - name: Query Prometheus for Metrics
        run: |
          PROMETHEUS_URL="https://working-cobra-early.ngrok-free.app"
          # Query Prometheus to confirm the Pushgateway metrics are scraped
          curl -s "${PROMETHEUS_URL}/api/v1/query?query=mule_logs_total" || echo "Prometheus query failed"
          
          # Optionally, you can output the query result to check for metrics in Prometheus
          curl -s "${PROMETHEUS_URL}/api/v1/query?query=mule_logs_total" | jq
